openapi: 3.0.3
info:
  title: Swagger Demo API
  description: API documentation for Swagger Demo with Spring Boot
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /user/get1:
    get:
      tags:
        - 1-사용자 API
      summary: GET 예시
      description: 간단한 GET 요청 테스트
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
  /user/get2:
    get:
      tags:
        - 1-사용자 API
      summary: GET 예시2 (파라미터 입력)
      description: 여러 파라미터를 받는 GET 요청 테스트
      parameters:
        - name: age
          in: query
          description: 사용자 나이
          required: true
          schema:
            type: integer
            format: int32
          example: 25
        - name: name
          in: query
          description: 사용자 이름
          required: true
          schema:
            type: string
          example: 홍길동
        - name: job
          in: query
          description: 사용자 직업
          required: false
          schema:
            type: string
          example: 개발자
      responses:
        '200':
          description: 요청 성공
          content:
            text/plain:
              schema:
                type: string
  /user/role:
    get:
      tags:
        - 1-사용자 API
      summary: 역할 조회
      description: 사용자 역할을 조회합니다.
      parameters:
        - name: role
          in: query
          description: 사용자 역할
          required: true
          schema:
            $ref: '#/components/schemas/UserRole'
          example: ADMIN
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
  /user/post1:
    post:
      tags:
        - 1-사용자 API
      summary: 사용자 생성
      description: 사용자 정보를 입력받아 생성합니다.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
  /user/put1/{id}:
    put:
      tags:
        - 1-사용자 API
      summary: 사용자 수정
      description: ID로 사용자 이름을 수정합니다.
      parameters:
        - name: id
          in: path
          description: 수정할 사용자 ID
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - name: name
          in: query
          description: 수정할 사용자 이름
          required: true
          schema:
            type: string
          example: 홍길둥
      responses:
        '200':
          description: 사용자 이름 수정 성공
          content:
            text/plain:
              schema:
                type: string
  /user/delete1/{id}:
    delete:
      tags:
        - 1-사용자 API
      summary: 사용자 삭제
      description: ID로 사용자를 삭제합니다.
      parameters:
        - name: id
          in: path
          description: 삭제할 사용자 ID
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          description: 사용자 삭제 성공
          content:
            text/plain:
              schema:
                type: string
  /products/list:
    get:
      tags:
        - 2-상품 API
      summary: 전체 상품 조회
      description: 모든 상품 목록을 조회합니다
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
  /products/search:
    get:
      tags:
        - 2-상품 API
      summary: 상품 검색
      description: 여러 조건으로 상품을 검색합니다
      parameters:
        - name: price
          in: query
          description: 상품 가격
          required: true
          schema:
            type: integer
            format: int32
          example: 10000
        - name: name
          in: query
          description: 상품명
          required: true
          schema:
            type: string
          example: 노트북
        - name: brand
          in: query
          description: 브랜드
          required: false
          schema:
            type: string
          example: 삼성
      responses:
        '200':
          description: 검색 성공
          content:
            text/plain:
              schema:
                type: string
  /products/category:
    get:
      tags:
        - 2-상품 API
      summary: 카테고리 조회
      description: 상품 카테고리를 조회합니다
      parameters:
        - name: category
          in: query
          description: 상품 카테고리
          required: true
          schema:
            $ref: '#/components/schemas/ProductCategory'
          example: ELECTRONICS
      responses:
        '200':
           description: 상품 조회 성공!
           content:
              application/json:
                schema:
                 $ref: '#/components/schemas/ProductCategory'

  /products/new:
    post:
      tags:
        - 2-상품 API
      summary: 상품 등록
      description: 새로운 상품을 등록합니다
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '201':
          description: 상품 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
  /products/update/{id}:
    put:
      tags:
        - 2-상품 API
      summary: 상품 수정
      description: 상품 정보를 수정합니다
      parameters:
        - name: id
          in: path
          description: 수정할 상품 ID
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - name: name
          in: query
          description: 수정할 상품명
          required: true
          schema:
            type: string
          example: 고급 노트북
      responses:
        '200':
          description: 상품 수정 성공
          content:
            text/plain:
              schema:
                type: string
  /products/delete/{id}:
    delete:
      tags:
        - 2-상품 API
      summary: 상품 삭제
      description: 상품을 삭제합니다
      parameters:
        - name: id
          in: path
          description: 삭제할 상품 ID
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          description: 상품 삭제 성공
          content:
             text/plain:
               schema:
                 type: string
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
    UserRole:
      type: string
      enum:
        - ADMIN
        - USER
        - GUEST
    ProductDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int32
        brand:
          type: string
        category:
          type: string
    ProductCategory:
      type: string
      enum:
        - ELECTRONICS
        - BOOKS
        - CLOTHING
        - GROCERIES
        - HOME_GOODS